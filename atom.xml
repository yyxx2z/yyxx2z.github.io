<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>QuantumZ</title>
  
  <subtitle>Blog site of yyxx2z</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yyxx2z.github.io/"/>
  <updated>2018-12-07T09:50:35.649Z</updated>
  <id>http://yyxx2z.github.io/</id>
  
  <author>
    <name>yyxx2z</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Think component in React/Vue</title>
    <link href="http://yyxx2z.github.io/2018/12/07/Think-component-in-React-Vue/"/>
    <id>http://yyxx2z.github.io/2018/12/07/Think-component-in-React-Vue/</id>
    <published>2018-12-07T07:11:35.000Z</published>
    <updated>2018-12-07T09:50:35.649Z</updated>
    
    <content type="html"><![CDATA[<p>从 SPA 时代开始前端不再只是 view 的承载，开始有了自己的业务逻辑。伴随着重复代码量的增加对 UI 和逻辑处理封装成独立的组件已经成为一个必然的趋势：低耦合高内聚，提高代码重用率，可单独测试，以及对多人团队协作效率的大大提高。React/Vue/Angular 的出现使我们不用了解如何去对 HTML CSS JS 分别单独进行组件化就能实现可复用组件。</p><p>而在开发时，我们容易对组件的抽象和设计有一个暧昧的判断。分割不清抽象组件时机，组件耦合性高，组件分割混乱无规范性。</p><a id="more"></a><h1 id="抽象组件原则"><a href="#抽象组件原则" class="headerlink" title="抽象组件原则"></a>抽象组件原则</h1><p><strong><a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" target="_blank" rel="noopener">单一功能原则</a></strong></p><p>抽象组件类似于函数式编程，没有外部依赖，在同一数据流下进行相同的行为反馈相同的表现。</p><p>独立性：组件应该是引入即用的，以微信小程序中写授权弹窗为例，在应用加载后不应该依赖于当前加载页面是否执行了授权状态查询而进行展示，而是应该将授权查询封装进组件，使组件的功能保持完整性和独立性。</p><p>而在 Vue 和 React 中，由于数据流和设计的不同，我们将分开介绍何时适合抽象组件。</p><h1 id="React"><a href="#React" class="headerlink" title="React"></a>React</h1><h4 id="组件抽象流程"><a href="#组件抽象流程" class="headerlink" title="组件抽象流程"></a>组件抽象流程</h4><ol><li>对 UI 进行层级划分<br>在 UI 的层面抽象出元素构成，并在遵循<a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" target="_blank" rel="noopener">单一功能</a>的原则下对组件进行最小单元划分。</li><li>创建静态版本</li><li>定义组件的最小完整表示</li><li>提升 state<ol><li>Presentational &amp;&amp; Container Components</li></ol></li><li>添加反向数据流</li></ol><h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><h4 id="组件抽象流程-1"><a href="#组件抽象流程-1" class="headerlink" title="组件抽象流程"></a>组件抽象流程</h4><ol><li>对 UI 进行功能划分</li><li>分化时确保该组件的复用率，提高可维护性</li><li>对组件进行独立完整地封装</li></ol><p>#总结<br>React 和 Vue 中划分组件有所不同。<br>React 是以拆分最小单元为目的进行组件划分，提升 state 使得组件数据通过 props 单向传递更加优雅。<br>Vue 是以功能划分为主，在保证可维护性的情况下分化出复用率高的组件。组件以业务目的为主要划分。</p><p>PS： 先挖坑列个目录，要去搞深圳 GDG 志愿者去了。两天后再更新</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从 SPA 时代开始前端不再只是 view 的承载，开始有了自己的业务逻辑。伴随着重复代码量的增加对 UI 和逻辑处理封装成独立的组件已经成为一个必然的趋势：低耦合高内聚，提高代码重用率，可单独测试，以及对多人团队协作效率的大大提高。React/Vue/Angular 的出现使我们不用了解如何去对 HTML CSS JS 分别单独进行组件化就能实现可复用组件。&lt;/p&gt;
&lt;p&gt;而在开发时，我们容易对组件的抽象和设计有一个暧昧的判断。分割不清抽象组件时机，组件耦合性高，组件分割混乱无规范性。&lt;/p&gt;
    
    </summary>
    
      <category term="React/Vue" scheme="http://yyxx2z.github.io/categories/React-Vue/"/>
    
    
      <category term="Javascript" scheme="http://yyxx2z.github.io/tags/Javascript/"/>
    
      <category term="Vue" scheme="http://yyxx2z.github.io/tags/Vue/"/>
    
      <category term="React" scheme="http://yyxx2z.github.io/tags/React/"/>
    
  </entry>
  
</feed>
