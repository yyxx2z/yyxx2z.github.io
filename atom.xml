<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>QuantumZ</title>
  
  <subtitle>Blog site of yyxx2z</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yyxx2z.github.io/"/>
  <updated>2018-12-13T11:41:54.297Z</updated>
  <id>http://yyxx2z.github.io/</id>
  
  <author>
    <name>yyxx2z</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Abstract component in React/Vue</title>
    <link href="http://yyxx2z.github.io/2018/12/07/Abstract-component-in-React-Vue/"/>
    <id>http://yyxx2z.github.io/2018/12/07/Abstract-component-in-React-Vue/</id>
    <published>2018-12-07T07:11:35.000Z</published>
    <updated>2018-12-13T11:41:54.297Z</updated>
    
    <content type="html"><![CDATA[<p>从 SPA 时代开始前端不再只是 view 的承载，开始有了自己的业务逻辑。伴随着重复代码量的增加对 UI 和逻辑处理封装成独立的组件已经成为一个必然的趋势：低耦合高内聚，提高代码重用率，可单独测试，以及对多人团队协作效率的大大提高。React/Vue/Angular 的出现使我们不用了解如何去对 HTML CSS JS 分别单独进行组件化就能实现可复用组件。</p><p>而在开发时，我们容易对组件的抽象和设计有一个暧昧的判断。分割不清抽象组件时机，组件耦合性高，组件分割混乱无规范性。</p><a id="more"></a><h1 id="抽象组件原则"><a href="#抽象组件原则" class="headerlink" title="抽象组件原则"></a>抽象组件原则</h1><p><strong><a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" target="_blank" rel="noopener">单一功能原则</a></strong></p><p>抽象组件类似于函数式编程，没有外部依赖，在同一数据流下进行相同的行为反馈相同的表现。</p><p>独立性：组件应该是引入即用的，以微信小程序中写授权弹窗为例，在应用加载后不应该依赖于当前加载页面是否执行了授权状态查询而进行展示，而是应该将授权查询封装进组件，使组件的功能保持完整性和独立性。</p><p>而在 Vue 和 React 中，由于数据流和设计的不同，我们将分开介绍何时适合抽象组件。</p><h1 id="React"><a href="#React" class="headerlink" title="React"></a>React</h1><h4 id="组件抽象流程"><a href="#组件抽象流程" class="headerlink" title="组件抽象流程"></a>组件抽象流程</h4><p>根据<a href="https://react.docschina.org/docs/thinking-in-react.html" target="_blank" rel="noopener">React理念</a>介绍，在 React 中抽象组件可大致分为以下步骤：</p><ol><li>对 UI 进行层级划分</li><li>创建静态版本</li><li>定义组件的最小完整表示</li><li>提升 state</li><li>添加反向数据流</li></ol><h4 id="根据数据构成进行组件划分"><a href="#根据数据构成进行组件划分" class="headerlink" title="根据数据构成进行组件划分"></a>根据数据构成进行组件划分</h4><p>在对页面 UI 进行层级划分后，我们可以对一些数据构成相同但是 UI 表现略有不同的组件归类为一个组件。如图两个 article-card ，虽然 UI 表现不一致，但是大都是由 banner + title + describe 等元素构成，部分不同可以通过 props 传入组件表现类型去控制部分元素的显隐和使用不同表现形式的 className 。</p><img src="/2018/12/07/Abstract-component-in-React-Vue/ui-example.png" title="This is an example image"><p>这样不仅能提高小组件的复用率和功能性，还能减少很多表现和功能类似的组件。</p><h4 id="容器组件和展示组件"><a href="#容器组件和展示组件" class="headerlink" title="容器组件和展示组件"></a>容器组件和展示组件</h4><p>即使你没有使用 Redux 进行你的 React 项目开发， 也可以参考 <a href="https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0" target="_blank" rel="noopener">Presentational and Container Components</a> 的组件划分思想。<br>文中指出将 React 开发时的组件分为两种：</p><ul><li>容器组件：进行组件状态和数据的更新，以及下发 props，用于描述组件的运行逻辑。</li><li>展示组件：组件 UI 的展示，包含组件的样式和元素构成，通过接收 props 进行渲染，通过触发 props 的回调函数进行数据修改。</li></ul><p>这种做法可以让你在开发应用时对组件功能有更清晰的划分，对数据和事件管理有清晰的层级，使你更好地理解应用。同时也能增强代码的可读性和维护性，别人在 review 代码时能够看到一个清晰的数据流和事件流，使你的应用构成更加优雅 (/// v ///)</p><p>And 很大提高了组件的复用性，当一个组件变成纯粹的待数据填充的<strong>展示骨架</strong>， 那么他就可以适用于不同数据源的父组件和处理不同事件表现，因为此时展示组件没有自身的数据和修改数据的事件处理函数，一切都交给包含它的父容器组件去处理。</p><h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><h4 id="组件抽象流程-1"><a href="#组件抽象流程-1" class="headerlink" title="组件抽象流程"></a>组件抽象流程</h4><ol><li>对 UI 进行块和功能划分<br>对 UI 进行功能的划分，如侧边栏和导航栏</li><li><p>分化时确保该组件的复用率，提高可维护性<br>不需要每有稍微重复的地方就去分化组件(虽然这样很爽看上去使代码’感觉’很简洁优雅)<br>假如我们要写两个用户列表渲染，一个 admin 用户不带 delete 按钮， 一个普通用户带 delete 按钮</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;list-wrapper&quot;&gt;</span><br><span class="line">  &lt;ul class=&quot;list admin-list&quot;&gt;</span><br><span class="line">    &lt;li </span><br><span class="line">      class=&quot;list-item&quot; </span><br><span class="line">      v-for=&quot;item in adminList&quot; </span><br><span class="line">      :key=&quot;&quot; </span><br><span class="line">    &gt;</span><br><span class="line">      &lt;span class=&quot;item-id&quot;&gt;&#123;&#123;item.id&#125;&#125;&lt;/span&gt;</span><br><span class="line">      &lt;span&gt;&#123;&#123;item.username&#125;&#125;&lt;span&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line"></span><br><span class="line">  &lt;ul class=&quot;list user-list&quot;&gt;</span><br><span class="line">    &lt;li </span><br><span class="line">      class=&quot;list-item&quot; </span><br><span class="line">      v-for=&quot;item in userList&quot; </span><br><span class="line">      :key=&quot;&quot; </span><br><span class="line">    &gt;</span><br><span class="line">      &lt;span class=&quot;item-id&quot;&gt;&#123;&#123;item.id&#125;&#125;&lt;/span&gt;</span><br><span class="line">      &lt;span&gt;&#123;&#123;item.username&#125;&#125;&lt;span&gt;</span><br><span class="line">      &lt;button class=&quot;interaction-button&quot; @click=&quot;delete(item.id)&quot; &gt;删除&lt;/button&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>如果对其进行抽象组件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;list-wrapper&quot;&gt;</span><br><span class="line">  &lt;UsersList </span><br><span class="line">    :list=&quot;adminList&quot;</span><br><span class="line">    :type=&quot;admin&quot; /&gt;</span><br><span class="line"></span><br><span class="line">  &lt;UsersList </span><br><span class="line">    :list=&quot;userList&quot;</span><br><span class="line">    @deleteItem=&quot;delete&quot; </span><br><span class="line">    :type=&quot;normal&quot; /&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>这样是不是很优雅简洁呀！可是当你的 vue 页面都是这样一大堆组件去构成时，或者是像上面 React 介绍的容器组件和展示组件去写 vue 组件时，虽然你的页面构成简洁清晰了，但是当别人需要维护<strong>只在一个页面或者一个块少量使用的组件</strong>时，就会导致他得多次打开和寻找你的组件依赖文件，虽然你在写的时候爽了，但却增加了维护的工作量。</p></li><li><p>对组件进行独立完整地封装</p></li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>React 和 Vue 中划分组件有所不同。<br>React 是以拆分最小单元为目的进行组件划分，提升 state 使得组件数据通过 props 单向传递更加优雅。<br>Vue 是以功能划分为主，在保证可维护性的情况下分化出复用率高的组件。组件以业务目的为主要划分。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从 SPA 时代开始前端不再只是 view 的承载，开始有了自己的业务逻辑。伴随着重复代码量的增加对 UI 和逻辑处理封装成独立的组件已经成为一个必然的趋势：低耦合高内聚，提高代码重用率，可单独测试，以及对多人团队协作效率的大大提高。React/Vue/Angular 的出现使我们不用了解如何去对 HTML CSS JS 分别单独进行组件化就能实现可复用组件。&lt;/p&gt;
&lt;p&gt;而在开发时，我们容易对组件的抽象和设计有一个暧昧的判断。分割不清抽象组件时机，组件耦合性高，组件分割混乱无规范性。&lt;/p&gt;
    
    </summary>
    
      <category term="React/Vue" scheme="http://yyxx2z.github.io/categories/React-Vue/"/>
    
    
      <category term="Javascript" scheme="http://yyxx2z.github.io/tags/Javascript/"/>
    
      <category term="Vue" scheme="http://yyxx2z.github.io/tags/Vue/"/>
    
      <category term="React" scheme="http://yyxx2z.github.io/tags/React/"/>
    
  </entry>
  
</feed>
